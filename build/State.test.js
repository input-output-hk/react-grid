"use strict";

var _react = _interopRequireDefault(require("react"));

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _enzyme = require("enzyme");

var _State = require("./State");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var getWrapper = function getWrapper() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _enzyme.mount)(_react["default"].createElement(_State.Provider, props, _react["default"].createElement(_State.Consumer, null, function (_ref) {
    var screenSizes = _ref.screenSizes,
        screenSize = _ref.screenSize;
    return _react["default"].createElement("div", null, _react["default"].createElement("ul", null, Object.keys(screenSizes).map(function (screenSize) {
      return _react["default"].createElement("li", {
        key: screenSize
      }, screenSizes[screenSize]);
    })), _react["default"].createElement("span", {
      key: "current screen size"
    }, screenSize));
  })));
};

describe('State', function () {
  afterEach(function () {
    global.windowEventListeners = {};
  });
  test('the default state is correct', function () {
    expect(getWrapper()).toMatchSnapshot();
  });
  describe('xs screens', function () {
    var wrapper;
    beforeEach(function () {
      window.innerWidth = 320;
      wrapper = getWrapper();
    });
    test('the default state is correct', function () {
      expect(wrapper).toMatchSnapshot();
    });
    describe('when screen resized to sm screen', function () {
      beforeEach(function () {
        window.innerWidth = 600;

        _testUtils["default"].act(function () {
          global.triggerWindowEvent('resize');
        });
      });
      test('it updates the wrapper correctly', function () {
        wrapper.update();
        expect(wrapper).toMatchSnapshot();
      });
    });
  });
  describe('sm screens', function () {
    beforeEach(function () {
      window.innerWidth = 600;
    });
    test('the default state is correct', function () {
      expect(getWrapper()).toMatchSnapshot();
    });
  });
  describe('md screens', function () {
    beforeEach(function () {
      window.innerWidth = 800;
    });
    test('the default state is correct', function () {
      expect(getWrapper()).toMatchSnapshot();
    });
  });
  describe('lg screens', function () {
    beforeEach(function () {
      window.innerWidth = 1100;
    });
    test('the default state is correct', function () {
      expect(getWrapper()).toMatchSnapshot();
    });
  });
  describe('xl screens', function () {
    beforeEach(function () {
      window.innerWidth = 1600;
    });
    test('the default state is correct', function () {
      expect(getWrapper()).toMatchSnapshot();
    });
  });
  describe('when using custom break points', function () {
    var wrapper;
    beforeEach(function () {
      wrapper = getWrapper({
        screenSizes: {
          sm: 200,
          md: 300,
          lg: 400,
          xl: 400
        }
      });
    });
    test('it renders correctly', function () {
      expect(wrapper).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,